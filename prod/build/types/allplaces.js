"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AllplacesType = void 0;

var _graphql = require("graphql");

var _pg = require("pg");

const conString = 'postgres://postgres:@192.168.20.78/forest_bd';
const pool = new _pg.Pool({
  connectionString: conString
});
const oblast_list = new _graphql.GraphQLObjectType({
  name: "oblast_list",
  fields: () => ({
    oblast_id: {
      type: _graphql.GraphQLString
    },
    oblast_ru: {
      type: _graphql.GraphQLString
    },
    oblast_ky: {
      type: _graphql.GraphQLString
    },
    oblast_en: {
      type: _graphql.GraphQLString
    },
    st_asewkt: {
      type: _graphql.GraphQLString
    },
    leshoz_list: {
      type: new _graphql.GraphQLList(leshoz_list),
      resolve: oblast_id => getLeshozList(oblast_id)
    }
  })
});
const leshoz_list = new _graphql.GraphQLObjectType({
  name: "leshoz_list",
  fields: () => ({
    leshoz_id: {
      type: _graphql.GraphQLString
    },
    leshoz_ru: {
      type: _graphql.GraphQLString
    },
    geom: {
      type: _graphql.GraphQLString
    },
    leshoztype_id: {
      type: _graphql.GraphQLString
    },
    forestries_list: {
      type: new _graphql.GraphQLList(forestries_list),
      resolve: leshoz_id => getForestriesList(leshoz_id)
    }
  })
});
const forestries_list = new _graphql.GraphQLObjectType({
  name: "forestries_list",
  fields: () => ({
    gid: {
      type: _graphql.GraphQLString
    },
    the_geom: {
      type: _graphql.GraphQLString
    },
    forestry_ru: {
      type: _graphql.GraphQLString
    },
    forestry_num: {
      type: _graphql.GraphQLString
    },
    forestrytype_id: {
      type: _graphql.GraphQLString
    },
    block_list: {
      type: new _graphql.GraphQLList(block_list),
      resolve: gid => getBlockList(gid)
    }
  })
});
const block_list = new _graphql.GraphQLObjectType({
  name: "block_list",
  fields: () => ({
    gid: {
      type: _graphql.GraphQLString
    },
    the_geom: {
      type: _graphql.GraphQLString
    },
    forestry_id: {
      type: _graphql.GraphQLString
    },
    block_num: {
      type: _graphql.GraphQLString
    },
    stand_list: {
      type: new _graphql.GraphQLList(stand_list),
      resolve: gid => getStandList(gid)
    }
  })
});
const stand_list = new _graphql.GraphQLObjectType({
  name: "stand_list",
  fields: () => ({
    gid: {
      type: _graphql.GraphQLString
    },
    the_geom: {
      type: _graphql.GraphQLString
    },
    leshoz_num: {
      type: _graphql.GraphQLString
    },
    block_num: {
      type: _graphql.GraphQLString
    },
    forestry_num: {
      type: _graphql.GraphQLString
    },
    stand_code: {
      type: _graphql.GraphQLString
    }
  })
});
const AllplacesType = new _graphql.GraphQLObjectType({
  name: "Allplaces",
  fields: {
    oblasts: {
      type: new _graphql.GraphQLList(oblast_list),
      resolve: () => getOblastList()
    }
  }
});
exports.AllplacesType = AllplacesType;

const getOblastList = () => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT oblast_id, ST_AsEWKT(the_geom), oblast_ru FROM topo.oblast', function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};

const getLeshozList = gid => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT * FROM forest.leshoz WHERE oblast_id =' + gid.oblast_id, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};

const getForestriesList = leshoz => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT * FROM forest.forestry WHERE leshoz_id =' + leshoz.leshoz_id, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};

const getBlockList = forestry => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT * FROM forest.block WHERE forestry_id =' + forestry.gid, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};

const getStandList = block => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT * FROM forest.stand WHERE block_id =' + block.gid, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,