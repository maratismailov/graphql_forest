"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeometryType = void 0;

var _graphql = require("graphql");

var _pg = require("pg");

const conString = 'postgres://postgres:@192.168.20.78/forest_bd';
const pool = new _pg.Pool({
  connectionString: conString
});
const oblast_list_geometry = new _graphql.GraphQLObjectType({
  name: "oblast_list_geometry",
  fields: () => ({
    oblast_id: {
      type: _graphql.GraphQLString
    },
    oblast_ru: {
      type: _graphql.GraphQLString
    },
    oblast_ky: {
      type: _graphql.GraphQLString
    },
    oblast_en: {
      type: _graphql.GraphQLString
    },
    geom: {
      type: _graphql.GraphQLString
    },
    leshoz_list: {
      type: new _graphql.GraphQLList(leshoz_list_geometry),
      resolve: oblast_id => getLeshozList(oblast_id)
    }
  })
});
const GeometryType = new _graphql.GraphQLObjectType({
  name: "Geometry",
  fields: {
    oblasts: {
      type: new _graphql.GraphQLList(oblast_list_geometry),
      resolve: () => getOblastList()
    }
  }
});
exports.GeometryType = GeometryType;
const leshoz_list_geometry = new _graphql.GraphQLObjectType({
  name: "leshoz_list_geometry",
  fields: () => ({
    leshoz_id: {
      type: _graphql.GraphQLString
    },
    leshoz_ru: {
      type: _graphql.GraphQLString
    },
    geom: {
      type: _graphql.GraphQLString
    },
    leshoztype_id: {
      type: _graphql.GraphQLString
    },
    forestries_list: {
      type: new _graphql.GraphQLList(forestries_list_geometry),
      resolve: leshoz_id => getForestriesList(leshoz_id)
    }
  })
});
const forestries_list_geometry = new _graphql.GraphQLObjectType({
  name: "forestries_list_geometry",
  fields: () => ({
    gid: {
      type: _graphql.GraphQLString
    },
    geom: {
      type: _graphql.GraphQLString
    },
    forestry_ru: {
      type: _graphql.GraphQLString
    },
    forestry_num: {
      type: _graphql.GraphQLString
    },
    forestrytype_id: {
      type: _graphql.GraphQLString
    },
    block_list: {
      type: new _graphql.GraphQLList(block_list_geometry),
      resolve: gid => getBlockList(gid)
    }
  })
});
const block_list_geometry = new _graphql.GraphQLObjectType({
  name: "block_list_geometry",
  fields: () => ({
    gid: {
      type: _graphql.GraphQLString
    },
    geom: {
      type: _graphql.GraphQLString
    },
    forestry_id: {
      type: _graphql.GraphQLString
    },
    block_num: {
      type: _graphql.GraphQLString
    },
    stand_list: {
      type: new _graphql.GraphQLList(stand_list_geometry),
      resolve: gid => getStandList(gid)
    }
  })
});
const stand_list_geometry = new _graphql.GraphQLObjectType({
  name: "stand_list_geometry",
  fields: () => ({
    gid: {
      type: _graphql.GraphQLString
    },
    geom: {
      type: _graphql.GraphQLString
    },
    leshoz_num: {
      type: _graphql.GraphQLString
    },
    block_num: {
      type: _graphql.GraphQLString
    },
    forestry_num: {
      type: _graphql.GraphQLString
    },
    stand_code: {
      type: _graphql.GraphQLString
    },
    stand_num: {
      type: _graphql.GraphQLString
    }
  })
});

const getOblastList = () => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT oblast_id, ST_AsGeoJSON(the_geom) AS geom, oblast_ru FROM topo.oblast', function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};

const getLeshozList = gid => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT leshoz_id, leshoz_ru, leshoztype_id, ST_AsGeoJSON(geom) AS geom FROM forest.leshoz WHERE oblast_id =' + gid.oblast_id, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};

const getForestriesList = leshoz => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT gid,  ST_AsGeoJSON(the_geom) AS geom, forestry_ru, forestrytype_id, forestry_num FROM forest.forestry WHERE leshoz_id =' + leshoz.leshoz_id, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};

const getBlockList = forestry => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT gid, ST_AsGeoJSON(the_geom) AS geom, block_num, forestry_id FROM forest.block WHERE forestry_id =' + forestry.gid, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};

const getStandList = block => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT gid, ST_AsGeoJSON(the_geom) AS geom, leshoz_num, block_num, forestry_num, stand_code , stand_num FROM forest.stand WHERE block_id =' + block.gid, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9nZW9tZXRyeS5qcyJdLCJuYW1lcyI6WyJjb25TdHJpbmciLCJwb29sIiwiUG9vbCIsImNvbm5lY3Rpb25TdHJpbmciLCJvYmxhc3RfbGlzdF9nZW9tZXRyeSIsIkdyYXBoUUxPYmplY3RUeXBlIiwibmFtZSIsImZpZWxkcyIsIm9ibGFzdF9pZCIsInR5cGUiLCJHcmFwaFFMU3RyaW5nIiwib2JsYXN0X3J1Iiwib2JsYXN0X2t5Iiwib2JsYXN0X2VuIiwiZ2VvbSIsImxlc2hvel9saXN0IiwiR3JhcGhRTExpc3QiLCJsZXNob3pfbGlzdF9nZW9tZXRyeSIsInJlc29sdmUiLCJnZXRMZXNob3pMaXN0IiwiR2VvbWV0cnlUeXBlIiwib2JsYXN0cyIsImdldE9ibGFzdExpc3QiLCJsZXNob3pfaWQiLCJsZXNob3pfcnUiLCJsZXNob3p0eXBlX2lkIiwiZm9yZXN0cmllc19saXN0IiwiZm9yZXN0cmllc19saXN0X2dlb21ldHJ5IiwiZ2V0Rm9yZXN0cmllc0xpc3QiLCJnaWQiLCJmb3Jlc3RyeV9ydSIsImZvcmVzdHJ5X251bSIsImZvcmVzdHJ5dHlwZV9pZCIsImJsb2NrX2xpc3QiLCJibG9ja19saXN0X2dlb21ldHJ5IiwiZ2V0QmxvY2tMaXN0IiwiZm9yZXN0cnlfaWQiLCJibG9ja19udW0iLCJzdGFuZF9saXN0Iiwic3RhbmRfbGlzdF9nZW9tZXRyeSIsImdldFN0YW5kTGlzdCIsImxlc2hvel9udW0iLCJzdGFuZF9jb2RlIiwic3RhbmRfbnVtIiwiUHJvbWlzZSIsInJlamVjdCIsImNvbm5lY3QiLCJlcnIiLCJjbGllbnQiLCJkb25lIiwiY29uc29sZSIsImVycm9yIiwicXVlcnkiLCJyZXN1bHQiLCJyb3dzIiwibGVzaG96IiwiZm9yZXN0cnkiLCJibG9jayJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBLE1BQU1BLFNBQVMsR0FBRyw4Q0FBbEI7QUFDQSxNQUFNQyxJQUFJLEdBQUcsSUFBSUMsUUFBSixD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QjtBQUM1TEosUUFBQUEsSUFBSTs7QUFDSixZQUFJRixHQUFKLEVBQVM7QUFDUCxpQkFBT0YsTUFBTSxDQUFDSyxPQUFPLENBQUNDLEtBQVIsQ0FBYyw2QkFBZCxFQUE2Q0osR0FBN0MsQ0FBRCxDQUFiO0FBQ0Q7O0FBQ0Q3QixRQUFBQSxPQUFPLENBQUNtQyxNQUFNLENBQUNDLElBQVIsQ0FBUDtBQUNELE9BTkQ7QUFPRCxLQVhEO0FBWUQsR0FiTSxDQUFQO0FBZUQsQ0FoQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMT2JqZWN0VHlwZSwgR3JhcGhRTFN0cmluZywgR3JhcGhRTEZsb2F0LCBHcmFwaFFMTGlzdCB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgeyBQb29sIH0gZnJvbSAncGcnXG5cbmNvbnN0IGNvblN0cmluZyA9ICdwb3N0Z3JlczovL3Bvc3RncmVzOkAxOTIuMTY4LjIwLjc4L2ZvcmVzdF9iZCdcbmNvbnN0IHBvb2wgPSBuZXcgUG9vbCh7XG4gIGNvbm5lY3Rpb25TdHJpbmc6IGNvblN0cmluZ1xufSk7XG5cblxuXG5cbmNvbnN0IG9ibGFzdF9saXN0X2dlb21ldHJ5ID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogXCJvYmxhc3RfbGlzdF9nZW9tZXRyeVwiLFxuICBmaWVsZHM6ICgpID0+ICh7XG4gICAgb2JsYXN0X2lkOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBvYmxhc3RfcnU6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIG9ibGFzdF9reTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgb2JsYXN0X2VuOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBnZW9tOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBsZXNob3pfbGlzdDoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KGxlc2hvel9saXN0X2dlb21ldHJ5KSxcbiAgICAgIHJlc29sdmU6IG9ibGFzdF9pZCA9PiBnZXRMZXNob3pMaXN0KG9ibGFzdF9pZClcbiAgICB9LFxuICB9KVxufSk7XG5cbmV4cG9ydCBjb25zdCBHZW9tZXRyeVR5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiBcIkdlb21ldHJ5XCIsXG4gIGZpZWxkczoge1xuICAgIG9ibGFzdHM6IHtcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTGlzdChvYmxhc3RfbGlzdF9nZW9tZXRyeSksXG4gICAgICByZXNvbHZlOiAoKSA9PiBnZXRPYmxhc3RMaXN0KClcbiAgICB9XG4gIH1cbn0pO1xuXG5jb25zdCBsZXNob3pfbGlzdF9nZW9tZXRyeSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6IFwibGVzaG96X2xpc3RfZ2VvbWV0cnlcIixcbiAgZmllbGRzOiAoKSA9PiAoe1xuICAgIGxlc2hvel9pZDogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgbGVzaG96X3J1OiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBnZW9tOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBsZXNob3p0eXBlX2lkOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBmb3Jlc3RyaWVzX2xpc3Q6IHtcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTGlzdChmb3Jlc3RyaWVzX2xpc3RfZ2VvbWV0cnkpLFxuICAgICAgcmVzb2x2ZTogbGVzaG96X2lkID0+IGdldEZvcmVzdHJpZXNMaXN0KGxlc2hvel9pZClcbiAgICB9LFxuICB9KVxufSk7XG5cbmNvbnN0IGZvcmVzdHJpZXNfbGlzdF9nZW9tZXRyeSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6IFwiZm9yZXN0cmllc19saXN0X2dlb21ldHJ5XCIsXG4gIGZpZWxkczogKCkgPT4gKHtcbiAgICBnaWQ6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIGdlb206IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIGZvcmVzdHJ5X3J1OiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBmb3Jlc3RyeV9udW06IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIGZvcmVzdHJ5dHlwZV9pZDogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgYmxvY2tfbGlzdDoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KGJsb2NrX2xpc3RfZ2VvbWV0cnkpLFxuICAgICAgcmVzb2x2ZTogZ2lkID0+IGdldEJsb2NrTGlzdChnaWQpXG4gICAgfSxcbiAgfSlcbn0pO1xuXG5jb25zdCBibG9ja19saXN0X2dlb21ldHJ5ID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogXCJibG9ja19saXN0X2dlb21ldHJ5XCIsXG4gIGZpZWxkczogKCkgPT4gKHtcbiAgICBnaWQ6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIGdlb206IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIGZvcmVzdHJ5X2lkOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBibG9ja19udW06IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIHN0YW5kX2xpc3Q6IHtcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTGlzdChzdGFuZF9saXN0X2dlb21ldHJ5KSxcbiAgICAgIHJlc29sdmU6IGdpZCA9PiBnZXRTdGFuZExpc3QoZ2lkKVxuICAgIH0sXG4gIH0pXG59KTtcblxuY29uc3Qgc3RhbmRfbGlzdF9nZW9tZXRyeSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6IFwic3RhbmRfbGlzdF9nZW9tZXRyeVwiLFxuICBmaWVsZHM6ICgpID0+ICh7XG4gICAgZ2lkOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBnZW9tOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBsZXNob3pfbnVtOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBibG9ja19udW06IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIGZvcmVzdHJ5X251bTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgc3RhbmRfY29kZTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgc3RhbmRfbnVtOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgfSlcbn0pO1xuXG5cbmNvbnN0IGdldE9ibGFzdExpc3QgPSAoKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcG9vbC5jb25uZWN0KGZ1bmN0aW9uIChlcnIsIGNsaWVudCwgZG9uZSkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcignZXJyb3IgZmV0Y2hpbmcgY2xpZW50IGZyb20gcG9vbCcsIGVycilcbiAgICAgIH1cbiAgICAgIGNsaWVudC5xdWVyeSgnU0VMRUNUIG9ibGFzdF9pZCwgU1RfQXNHZW9KU09OKHRoZV9nZW9tKSBBUyBnZW9tLCBvYmxhc3RfcnUgRlJPTSB0b3BvLm9ibGFzdCcsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICBkb25lKClcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiByZWplY3QoY29uc29sZS5lcnJvcignZXJyb3IgaGFwcGVuZWQgZHVyaW5nIHF1ZXJ5JywgZXJyKSlcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHJlc3VsdC5yb3dzKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG4gIClcbn1cblxuY29uc3QgZ2V0TGVzaG96TGlzdCA9IChnaWQpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBwb29sLmNvbm5lY3QoZnVuY3Rpb24gKGVyciwgY2xpZW50LCBkb25lKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdlcnJvciBmZXRjaGluZyBjbGllbnQgZnJvbSBwb29sJywgZXJyKVxuICAgICAgfVxuICAgICAgY2xpZW50LnF1ZXJ5KCdTRUxFQ1QgbGVzaG96X2lkLCBsZXNob3pfcnUsIGxlc2hvenR5cGVfaWQsIFNUX0FzR2VvSlNPTihnZW9tKSBBUyBnZW9tIEZST00gZm9yZXN0Lmxlc2hveiBXSEVSRSBvYmxhc3RfaWQgPScgKyBnaWQub2JsYXN0X2lkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgZG9uZSgpXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGhhcHBlbmVkIGR1cmluZyBxdWVyeScsIGVycikpXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQucm93cylcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuICApXG59XG5cbmNvbnN0IGdldEZvcmVzdHJpZXNMaXN0ID0gKGxlc2hveikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHBvb2wuY29ubmVjdChmdW5jdGlvbiAoZXJyLCBjbGllbnQsIGRvbmUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGZldGNoaW5nIGNsaWVudCBmcm9tIHBvb2wnLCBlcnIpXG4gICAgICB9XG4gICAgICBjbGllbnQucXVlcnkoJ1NFTEVDVCBnaWQsICBTVF9Bc0dlb0pTT04odGhlX2dlb20pIEFTIGdlb20sIGZvcmVzdHJ5X3J1LCBmb3Jlc3RyeXR5cGVfaWQsIGZvcmVzdHJ5X251bSBGUk9NIGZvcmVzdC5mb3Jlc3RyeSBXSEVSRSBsZXNob3pfaWQgPScgKyBsZXNob3oubGVzaG96X2lkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgZG9uZSgpXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGhhcHBlbmVkIGR1cmluZyBxdWVyeScsIGVycikpXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQucm93cylcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuICApXG59XG5cblxuY29uc3QgZ2V0QmxvY2tMaXN0ID0gKGZvcmVzdHJ5KSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcG9vbC5jb25uZWN0KGZ1bmN0aW9uIChlcnIsIGNsaWVudCwgZG9uZSkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcignZXJyb3IgZmV0Y2hpbmcgY2xpZW50IGZyb20gcG9vbCcsIGVycilcbiAgICAgIH1cbiAgICAgIGNsaWVudC5xdWVyeSgnU0VMRUNUIGdpZCwgU1RfQXNHZW9KU09OKHRoZV9nZW9tKSBBUyBnZW9tLCBibG9ja19udW0sIGZvcmVzdHJ5X2lkIEZST00gZm9yZXN0LmJsb2NrIFdIRVJFIGZvcmVzdHJ5X2lkID0nICsgZm9yZXN0cnkuZ2lkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgZG9uZSgpXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGhhcHBlbmVkIGR1cmluZyBxdWVyeScsIGVycikpXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQucm93cylcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuICApXG59XG5cblxuY29uc3QgZ2V0U3RhbmRMaXN0ID0gKGJsb2NrKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcG9vbC5jb25uZWN0KGZ1bmN0aW9uIChlcnIsIGNsaWVudCwgZG9uZSkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcignZXJyb3IgZmV0Y2hpbmcgY2xpZW50IGZyb20gcG9vbCcsIGVycilcbiAgICAgIH1cbiAgICAgIGNsaWVudC5xdWVyeSgnU0VMRUNUIGdpZCwgU1RfQXNHZW9KU09OKHRoZV9nZW9tKSBBUyBnZW9tLCBsZXNob3pfbnVtLCBibG9ja19udW0sIGZvcmVzdHJ5X251bSwgc3RhbmRfY29kZSAsIHN0YW5kX251bSBGUk9NIGZvcmVzdC5zdGFuZCBXSEVSRSBibG9ja19pZCA9JyArIGJsb2NrLmdpZCwgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGRvbmUoKVxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChjb25zb2xlLmVycm9yKCdlcnJvciBoYXBwZW5lZCBkdXJpbmcgcXVlcnknLCBlcnIpKVxuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUocmVzdWx0LnJvd3MpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgKVxufSJdfQ==