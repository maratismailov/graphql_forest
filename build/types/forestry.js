"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ForestryType = void 0;

var _graphql = require("graphql");

var _pg = require("pg");

const conString = 'postgres://postgres:@192.168.20.78/forest_bd';
const pool = new _pg.Pool({
  connectionString: conString
});
const block_list = new _graphql.GraphQLObjectType({
  name: "block_list",
  fields: () => ({
    gid: {
      type: _graphql.GraphQLString
    },
    geom: {
      type: _graphql.GraphQLString
    },
    forestry_id: {
      type: _graphql.GraphQLString
    },
    block_num: {
      type: _graphql.GraphQLString
    },
    stand_list: {
      type: new _graphql.GraphQLList(stand_list),
      resolve: gid => getStandList(gid)
    }
  })
});
const stand_list = new _graphql.GraphQLObjectType({
  name: "stand_list",
  fields: () => ({
    gid: {
      type: _graphql.GraphQLString
    },
    geom: {
      type: _graphql.GraphQLString
    },
    leshoz_num: {
      type: _graphql.GraphQLString
    },
    block_num: {
      type: _graphql.GraphQLString
    },
    forestry_num: {
      type: _graphql.GraphQLString
    },
    stand_code: {
      type: _graphql.GraphQLString
    },
    stand_num: {
      type: _graphql.GraphQLString
    }
  })
});
const ForestryType = new _graphql.GraphQLObjectType({
  name: "Forestry",
  fields: {
    blocks: {
      type: new _graphql.GraphQLList(block_list),
      // resolve: id => getBlockList(id)
      resolve: (parent, args) => console.log(args)
    }
  }
});
exports.ForestryType = ForestryType;

const getBlockList = forestry => {
  console.log(forestry.id);
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT gid, block_num, forestry_id FROM forest.block WHERE forestry_id =' + forestry.id, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};

const getStandList = block => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT gid, leshoz_num, block_num, forestry_num, stand_num FROM forest.stand WHERE block_id =' + block.gid, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9mb3Jlc3RyeS5qcyJdLCJuYW1lcyI6WyJjb25TdHJpbmciLCJwb29sIiwiUG9vbCIsImNvbm5lY3Rpb25TdHJpbmciLCJibG9ja19saXN0IiwiR3JhcGhRTE9iamVjdFR5cGUiLCJuYW1lIiwiZmllbGRzIiwiZ2lkIiwidHlwZSIsIkdyYXBoUUxTdHJpbmciLCJnZW9tIiwiZm9yZXN0cnlfaWQiLCJibG9ja19udW0iLCJzdGFuZF9saXN0IiwiR3JhcGhRTExpc3QiLCJyZXNvbHZlIiwiZ2V0U3RhbmRMaXN0IiwibGVzaG96X251bSIsImZvcmVzdHJ5X251bSIsInN0YW5kX2NvZGUiLCJzdGFuZF9udW0iLCJGb3Jlc3RyeVR5cGUiLCJibG9ja3MiLCJwYXJlbnQiLCJhcmdzIiwiY29uc29sZSIsImxvZyIsImdldEJsb2NrTGlzdCIsImZvcmVzdHJ5IiwiaWQiLCJQcm9taXNlIiwicmVqZWN0IiwiY29ubmVjdCIsImVyciIsImNsaWVudCIsImRvbmUiLCJlcnJvciIsInF1ZXJ5IiwicmVzdWx0Iiwicm93cyIsImJsb2NrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsU0FBUyxHQUFHLDhDQUFsQjtBQUNBLE1BQU1DLElBQUksR0FBRyxJQUFJQyxRQUFKLENBQVM7QUFDcEJDLEVBQUFBLGdCQUFnQixFQUFFSDtBQURFLENBQVQsQ0FBYjtBQUtBLE1BQU1JLFVBQVUsR0FBRyxJQUFJQywwQkFBSixDQUFzQjtBQUN2Q0MsRUFBQUEsSUFBSSxFQUFFLFlBRGlDO0FBRXZDQyxFQUFBQSxNQUFNLEVBQUUsT0FBTztBQUNiQyxJQUFBQSxHQUFHLEVBQUU7QUFBRUMsTUFBQUEsSUFBSSxFQUFFQztBQUFSLEtBRFE7QUFFYkMsSUFBQUEsSUFBSSxFQUFFO0FBQUVGLE1BQUFBLElBQUksRUFBRUM7QUFBUixLQUZPO0FBR2JFLElBQUFBLFdBQVcsRUFBRTtBQUFFSCxNQUFBQSxJQUFJLEVBQUVDO0FBQVIsS0FI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QUFPUixPQUFPLENBQUNXLEtBQVIsQ0FBYyxpQ0FBZCxFQUFpREgsR0FBakQsQ0FBUDtBQUNEOztBQUNEQyxNQUFBQSxNQUFNLENBQUNHLEtBQVAsQ0FBYSxrR0FBa0dHLEtBQUssQ0FBQ2pDLEdBQXJILEVBQTBILFVBQVUwQixHQUFWLEVBQWVLLE1BQWYsRUFBdUI7QUFDL0lILFFBQUFBLElBQUk7O0FBQ0osWUFBSUYsR0FBSixFQUFTO0FBQ1AsaUJBQU9GLE1BQU0sQ0FBQ04sT0FBTyxDQUFDVyxLQUFSLENBQWMsNkJBQWQsRUFBNkNILEdBQTdDLENBQUQsQ0FBYjtBQUNEOztBQUNEbEIsUUFBQUEsT0FBTyxDQUFDdUIsTUFBTSxDQUFDQyxJQUFSLENBQVA7QUFDRCxPQU5EO0FBT0QsS0FYRDtBQVlELEdBYk0sQ0FBUDtBQWVELENBaEJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTE9iamVjdFR5cGUsIEdyYXBoUUxTdHJpbmcsIEdyYXBoUUxGbG9hdCwgR3JhcGhRTExpc3QsIGdyYXBocWwsIEdyYXBoUUxJbnQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IHsgUG9vbCB9IGZyb20gJ3BnJ1xuXG5jb25zdCBjb25TdHJpbmcgPSAncG9zdGdyZXM6Ly9wb3N0Z3JlczpAMTkyLjE2OC4yMC43OC9mb3Jlc3RfYmQnXG5jb25zdCBwb29sID0gbmV3IFBvb2woe1xuICBjb25uZWN0aW9uU3RyaW5nOiBjb25TdHJpbmdcbn0pO1xuXG5cbmNvbnN0IGJsb2NrX2xpc3QgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiBcImJsb2NrX2xpc3RcIixcbiAgZmllbGRzOiAoKSA9PiAoe1xuICAgIGdpZDogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgZ2VvbTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgZm9yZXN0cnlfaWQ6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIGJsb2NrX251bTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgc3RhbmRfbGlzdDoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KHN0YW5kX2xpc3QpLFxuICAgICAgcmVzb2x2ZTogZ2lkID0+IGdldFN0YW5kTGlzdChnaWQpXG4gICAgfSxcbiAgfSlcbn0pO1xuXG5jb25zdCBzdGFuZF9saXN0ID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogXCJzdGFuZF9saXN0XCIsXG4gIGZpZWxkczogKCkgPT4gKHtcbiAgICBnaWQ6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIGdlb206IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIGxlc2hvel9udW06IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIGJsb2NrX251bTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgZm9yZXN0cnlfbnVtOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBzdGFuZF9jb2RlOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBzdGFuZF9udW06IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICB9KVxufSk7XG5cblxuZXhwb3J0IGNvbnN0IEZvcmVzdHJ5VHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6IFwiRm9yZXN0cnlcIixcbiAgZmllbGRzOiB7XG4gICAgYmxvY2tzOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QoYmxvY2tfbGlzdCksXG4gICAgICAvLyByZXNvbHZlOiBpZCA9PiBnZXRCbG9ja0xpc3QoaWQpXG4gICAgICByZXNvbHZlOiAocGFyZW50LCBhcmdzKSA9PiBjb25zb2xlLmxvZyhhcmdzKVxuICAgIH1cbiAgfVxufSk7XG5cblxuY29uc3QgZ2V0QmxvY2tMaXN0ID0gKGZvcmVzdHJ5KSA9PiB7XG4gIGNvbnNvbGUubG9nKGZvcmVzdHJ5LmlkKVxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHBvb2wuY29ubmVjdChmdW5jdGlvbiAoZXJyLCBjbGllbnQsIGRvbmUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGZldGNoaW5nIGNsaWVudCBmcm9tIHBvb2wnLCBlcnIpXG4gICAgICB9XG4gICAgICBjbGllbnQucXVlcnkoJ1NFTEVDVCBnaWQsIGJsb2NrX251bSwgZm9yZXN0cnlfaWQgRlJPTSBmb3Jlc3QuYmxvY2sgV0hFUkUgZm9yZXN0cnlfaWQgPScgKyBmb3Jlc3RyeS5pZCwgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGRvbmUoKVxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChjb25zb2xlLmVycm9yKCdlcnJvciBoYXBwZW5lZCBkdXJpbmcgcXVlcnknLCBlcnIpKVxuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUocmVzdWx0LnJvd3MpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgKVxufVxuXG5cbmNvbnN0IGdldFN0YW5kTGlzdCA9IChibG9jaykgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHBvb2wuY29ubmVjdChmdW5jdGlvbiAoZXJyLCBjbGllbnQsIGRvbmUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGZldGNoaW5nIGNsaWVudCBmcm9tIHBvb2wnLCBlcnIpXG4gICAgICB9XG4gICAgICBjbGllbnQucXVlcnkoJ1NFTEVDVCBnaWQsIGxlc2hvel9udW0sIGJsb2NrX251bSwgZm9yZXN0cnlfbnVtLCBzdGFuZF9udW0gRlJPTSBmb3Jlc3Quc3RhbmQgV0hFUkUgYmxvY2tfaWQgPScgKyBibG9jay5naWQsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICBkb25lKClcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiByZWplY3QoY29uc29sZS5lcnJvcignZXJyb3IgaGFwcGVuZWQgZHVyaW5nIHF1ZXJ5JywgZXJyKSlcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHJlc3VsdC5yb3dzKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG4gIClcbn0iXX0=