"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ForestryType = void 0;

var _graphql = require("graphql");

var _pg = require("pg");

const conString = 'postgres://postgres:@192.168.20.78/forest_bd';
const pool = new _pg.Pool({
  connectionString: conString
});
const block_list = new _graphql.GraphQLObjectType({
  name: "block_list",
  fields: () => ({
    gid: {
      type: _graphql.GraphQLString
    },
    geom: {
      type: _graphql.GraphQLString
    },
    forestry_id: {
      type: _graphql.GraphQLString
    },
    block_num: {
      type: _graphql.GraphQLString
    },
    stand_list: {
      type: new _graphql.GraphQLList(stand_list),
      resolve: gid => getStandList(gid)
    }
  })
});
const stand_list = new _graphql.GraphQLObjectType({
  name: "stand_list",
  fields: () => ({
    gid: {
      type: _graphql.GraphQLString
    },
    geom: {
      type: _graphql.GraphQLString
    },
    leshoz_num: {
      type: _graphql.GraphQLString
    },
    block_num: {
      type: _graphql.GraphQLString
    },
    forestry_num: {
      type: _graphql.GraphQLString
    },
    stand_code: {
      type: _graphql.GraphQLString
    },
    stand_num: {
      type: _graphql.GraphQLString
    }
  })
});
const ForestryType = new _graphql.GraphQLObjectType({
  name: "Forestry",
  fields: {
    blocks: {
      type: new _graphql.GraphQLList(block_list),
      resolve: args => getBlockList(args)
    }
  }
});
exports.ForestryType = ForestryType;

const getBlockList = args => {
  // console.log(args, parent.args)
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT gid, block_num, forestry_id, ST_AsGeoJSON(the_geom) AS geom FROM forest.block WHERE forestry_id =' + args.id, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};

const getStandList = block => {
  return new Promise((resolve, reject) => {
    pool.connect(function (err, client, done) {
      if (err) {
        return console.error('error fetching client from pool', err);
      }

      client.query('SELECT gid, leshoz_num, block_num, ST_AsGeoJSON(the_geom) AS geom, forestry_num, stand_num FROM forest.stand WHERE block_id =' + block.gid, function (err, result) {
        done();

        if (err) {
          return reject(console.error('error happened during query', err));
        }

        resolve(result.rows);
      });
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9mb3Jlc3RyeS5qcyJdLCJuYW1lcyI6WyJjb25TdHJpbmciLCJwb29sIiwiUG9vbCIsImNvbm5lY3Rpb25TdHJpbmciLCJibG9ja19saXN0IiwiR3JhcGhRTE9iamVjdFR5cGUiLCJuYW1lIiwiZmllbGRzIiwiZ2lkIiwidHlwZSIsIkdyYXBoUUxTdHJpbmciLCJnZW9tIiwiZm9yZXN0cnlfaWQiLCJibG9ja19udW0iLCJzdGFuZF9saXN0IiwiR3JhcGhRTExpc3QiLCJyZXNvbHZlIiwiZ2V0U3RhbmRMaXN0IiwibGVzaG96X251bSIsImZvcmVzdHJ5X251bSIsInN0YW5kX2NvZGUiLCJzdGFuZF9udW0iLCJGb3Jlc3RyeVR5cGUiLCJibG9ja3MiLCJhcmdzIiwiZ2V0QmxvY2tMaXN0IiwiUHJvbWlzZSIsInJlamVjdCIsImNvbm5lY3QiLCJlcnIiLCJjbGllbnQiLCJkb25lIiwiY29uc29sZSIsImVycm9yIiwicXVlcnkiLCJpZCIsInJlc3VsdCIsInJvd3MiLCJibG9jayJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBLE1BQU1BLFNBQVMsR0FBRyw4Q0FBbEI7QUFDQSxNQUFNQyxJQUFJLEdBQUcsSUFBSUMsUUFBSixDQUFTO0FBQ3BCQyxFQUFBQSxnQkFBZ0IsRUFBRUg7QUFERSxDQUFULENBQWI7QUFLQSxNQUFNSSxVQUFVLEdBQUcsSUFBSUMsMEJBQUosQ0FBc0I7QUFDdkNDLEVBQUFBLElBQUksRUFBRSxZQURpQztBQUV2Q0MsRUFBQUEsTUFBTSxFQUFFLE9BQU87QUFDYkMsSUFBQUEsR0FBRyxFQUFFO0FBQUVDLE1BQUFBLElBQUksRUFBRUM7QUFBUixLQURRO0FBRWJDLElBQUFBLElBQUksRUFBRTtBQUFFRixNQUFBQSxJQUFJLEVBQUVDO0FBQVIsS0FGTztBQUdiRSxJQUFBQSxXQUFXLEVBQUU7QUFBRUgsTUFBQUEsSUFBSSxFQUFFQztBQUFSLEtBSEE7QUFJYkcsSUFBQUEsU0FBUyxFQUFFO0FB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LEdBQXJKLEVBQTBKLFVBQVVxQixHQUFWLEVBQWVPLE1BQWYsRUFBdUI7QUFDL0tMLFFBQUFBLElBQUk7O0FBQ0osWUFBSUYsR0FBSixFQUFTO0FBQ1AsaUJBQU9GLE1BQU0sQ0FBQ0ssT0FBTyxDQUFDQyxLQUFSLENBQWMsNkJBQWQsRUFBNkNKLEdBQTdDLENBQUQsQ0FBYjtBQUNEOztBQUNEYixRQUFBQSxPQUFPLENBQUNvQixNQUFNLENBQUNDLElBQVIsQ0FBUDtBQUNELE9BTkQ7QUFPRCxLQVhEO0FBWUQsR0FiTSxDQUFQO0FBZUQsQ0FoQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMT2JqZWN0VHlwZSwgR3JhcGhRTFN0cmluZywgR3JhcGhRTEZsb2F0LCBHcmFwaFFMTGlzdCwgZ3JhcGhxbCwgR3JhcGhRTEludCwgR3JhcGhRTE5vbk51bGwsIEdyYXBoUUxJRCB9IGZyb20gXCJncmFwaHFsXCI7XG5pbXBvcnQgeyBQb29sIH0gZnJvbSAncGcnXG5cbmNvbnN0IGNvblN0cmluZyA9ICdwb3N0Z3JlczovL3Bvc3RncmVzOkAxOTIuMTY4LjIwLjc4L2ZvcmVzdF9iZCdcbmNvbnN0IHBvb2wgPSBuZXcgUG9vbCh7XG4gIGNvbm5lY3Rpb25TdHJpbmc6IGNvblN0cmluZ1xufSk7XG5cblxuY29uc3QgYmxvY2tfbGlzdCA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6IFwiYmxvY2tfbGlzdFwiLFxuICBmaWVsZHM6ICgpID0+ICh7XG4gICAgZ2lkOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBnZW9tOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBmb3Jlc3RyeV9pZDogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgYmxvY2tfbnVtOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBzdGFuZF9saXN0OiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3Qoc3RhbmRfbGlzdCksXG4gICAgICByZXNvbHZlOiBnaWQgPT4gZ2V0U3RhbmRMaXN0KGdpZClcbiAgICB9LFxuICB9KVxufSk7XG5cbmNvbnN0IHN0YW5kX2xpc3QgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiBcInN0YW5kX2xpc3RcIixcbiAgZmllbGRzOiAoKSA9PiAoe1xuICAgIGdpZDogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgZ2VvbTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgbGVzaG96X251bTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gICAgYmxvY2tfbnVtOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICBmb3Jlc3RyeV9udW06IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIHN0YW5kX2NvZGU6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICAgIHN0YW5kX251bTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH0sXG4gIH0pXG59KTtcblxuXG5leHBvcnQgY29uc3QgRm9yZXN0cnlUeXBlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogXCJGb3Jlc3RyeVwiLFxuICBmaWVsZHM6IHtcbiAgICBibG9ja3M6IHtcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTGlzdChibG9ja19saXN0KSxcbiAgICAgIHJlc29sdmU6IGFyZ3MgPT4gZ2V0QmxvY2tMaXN0KGFyZ3MpXG4gICAgfVxuICB9XG59KTtcblxuXG5jb25zdCBnZXRCbG9ja0xpc3QgPSAoYXJncykgPT4ge1xuICAvLyBjb25zb2xlLmxvZyhhcmdzLCBwYXJlbnQuYXJncylcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBwb29sLmNvbm5lY3QoZnVuY3Rpb24gKGVyciwgY2xpZW50LCBkb25lKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdlcnJvciBmZXRjaGluZyBjbGllbnQgZnJvbSBwb29sJywgZXJyKVxuICAgICAgfVxuICAgICAgY2xpZW50LnF1ZXJ5KCdTRUxFQ1QgZ2lkLCBibG9ja19udW0sIGZvcmVzdHJ5X2lkLCBTVF9Bc0dlb0pTT04odGhlX2dlb20pIEFTIGdlb20gRlJPTSBmb3Jlc3QuYmxvY2sgV0hFUkUgZm9yZXN0cnlfaWQgPScgKyBhcmdzLmlkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgZG9uZSgpXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGhhcHBlbmVkIGR1cmluZyBxdWVyeScsIGVycikpXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQucm93cylcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuICApXG59XG5cblxuY29uc3QgZ2V0U3RhbmRMaXN0ID0gKGJsb2NrKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcG9vbC5jb25uZWN0KGZ1bmN0aW9uIChlcnIsIGNsaWVudCwgZG9uZSkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcignZXJyb3IgZmV0Y2hpbmcgY2xpZW50IGZyb20gcG9vbCcsIGVycilcbiAgICAgIH1cbiAgICAgIGNsaWVudC5xdWVyeSgnU0VMRUNUIGdpZCwgbGVzaG96X251bSwgYmxvY2tfbnVtLCBTVF9Bc0dlb0pTT04odGhlX2dlb20pIEFTIGdlb20sIGZvcmVzdHJ5X251bSwgc3RhbmRfbnVtIEZST00gZm9yZXN0LnN0YW5kIFdIRVJFIGJsb2NrX2lkID0nICsgYmxvY2suZ2lkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgZG9uZSgpXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGhhcHBlbmVkIGR1cmluZyBxdWVyeScsIGVycikpXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQucm93cylcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuICApXG59Il19